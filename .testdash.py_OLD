import time
import dash
import dash_bootstrap_components as dbc
import numpy as np
import plotly.graph_objs as go
from dash import Input, Output, dcc, html, callback
import pandas as pd
from config import get_logger
from ids import AFFIX_PLOT


logger = get_logger(__name__)

dbc_css = "https://cdn.jsdelivr.net/gh/AnnMarieW/dash-bootstrap-templates/dbc.min.css"
from dash_bootstrap_templates import load_figure_template


# This loads the "cyborg" themed figure template from dash-bootstrap-templates library,
# adds it to plotly.io and makes it the default figure template.
load_figure_template("pulse")

app = dash.Dash(
    __name__, external_stylesheets=[dbc.themes.PULSE, dbc_css], use_pages=True
)
df = pd.read_csv("https://git.io/Juf1t")


items = [
    dbc.DropdownMenuItem("Item 1"),
    dbc.DropdownMenuItem("Item 2"),
    dbc.DropdownMenuItem("Item 3"),
]

app.layout = dbc.Container(
    [
        dbc.Row(
            [
                html.H1("Multi-page app with Dash Pages"),
                html.Div(
                    [
                        html.Div(dcc.Link(page["name"], href=page["relative_path"]))
                        for page in dash.page_registry.values()
                    ]
                ),
            ],
        ),
        dash.page_container,
    ]
)

# app.layout =
# html.Div(
#     [dcc.Location(id="url", refresh=False), html.Div(id="page-content")]
# )

# from pages import app_ads, internal_audit, home


# @callback(Output("page-content", "children"), Input("url", "pathname"))
# def display_page(pathname):
#     if pathname == "/home":
#         return home.layout
#     elif pathname == "/app_ads":
#         return app_ads.layout
#     elif pathname == "/internal_audit":
#         return internal_audit.layout
#     else:
#         return "404"


# app.layout = dbc.Container(
#     [
#         html.Div(
#             [
#                 dcc.Store(id="store"),
#                 dcc.Store(id=f"top-level-memory"),
#                 html.H1("Dynamically rendered tab content"),
#                 html.Hr(),
#                 dbc.Button(
#                     "Regenerate graphs",
#                     color="primary",
#                     id="button",
#                     className="mb-3",
#                 ),
#                 dbc.DropdownMenu(
#                     id="company-selector",
#                     children=items,
#                     # options=[{"label": i, "value": i} for i in ["futurecompany1", "comp2"]],
#                     # multi=True,
#                     # placeholder="Select Companies...",
#                     # persistence=True,
#                     # persistence_type="memory",
#                 ),
#                 dbc.Alert("hello", id="my-alert"),
#                 dbc.Tabs(
#                     [
#                         dbc.Tab(label="Scatter", tab_id="scatter"),
#                         dbc.Tab(label="Histograms", tab_id="histogram"),
#                         dbc.Tab(label="James", tab_id="james"),
#                     ],
#                     id="tabs",
#                     active_tab="scatter",
#                 ),
#                 html.Div(id="tab-content", className="p-4"),
#                 dbc.Label("Click a cell in the table:"),
#                 dash_table.DataTable(
#                     df.to_dict("records"),
#                     [{"name": i, "id": i} for i in df.columns],
#                     id="tbl",
#                 ),
#                 dbc.Alert(id="tbl_out"),
#             ]
#         )
#     ],
#     className="dbc",
# )


@app.callback(
    Output("top-level-memory", "data"),
    Input({"type": "left-menu", "index": dash.ALL}, "n_clicks"),
)
def histograms(n_clicks):
    logger.info(f"histogram table: {dash.ctx.triggered_id=}, {n_clicks=}")
    myval = ""
    if dash.ctx.triggered_id:
        myval = dash.ctx.triggered_id["index"]
    return myval


@app.callback(
    Output("james-overview-plot", "figure"),
    Input("top-level-memory", "data"),
)
def check_trigger(trigger_value):
    logger.info(f"check trigger: {trigger_value=}")
    if trigger_value and "adsets" in trigger_value:
        msg = "success"
        fig = go.Figure(
            data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],
            layout=go.Layout(
                title=go.layout.Title(
                    text=f"{trigger_value} Figure Specified By A Graph Object"
                )
            ),
        )
    else:
        msg = "fail"
        fig = go.Figure()
    return fig


def make_plot_div(tab_id):
    second_plot = html.Div()
    if tab_id in ["data-import"]:
        second_plot = html.Div(
            dcc.Graph(
                id=f"{tab_id}-overview-plot2",
                config={"displaylogo": False},
                figure=go.Figure(),
            )
        )

    plot_div = html.Div(
        [
            dcc.Loading(
                children=[
                    dcc.Graph(
                        id=tab_id + AFFIX_PLOT,
                        config={"displaylogo": False},
                        figure=go.Figure(),
                    ),
                    second_plot,
                ]
            ),
        ],
        style={
            "padding": "15px",
        },
    )
    return plot_div


def make_tab(active_tab):
    checks_tables = ["adsets_with_pending_creatives", "adsets_recently_rotated"]
    info = None
    active_x = None
    mystuff = dash.html.Div(
        [
            dbc.ButtonGroup(
                [
                    dbc.Button(
                        [
                            html.Strong(x),
                            html.Br(),
                            dbc.Badge(
                                "" if not info else f"{info[x]['size']}",
                                color="light",
                                text_color="secondary" if x != active_x else "primary",
                                className="ms-1",
                            ),
                            ""
                            if not info
                            else f" Updated: {info[x]['updated_at'].strftime('%Y-%m-%d %H:%M')}",
                        ],
                        color="secondary" if x != active_x else "primary",
                        id={"type": "left-menu", "index": x},
                        style={"text-align": "left"},
                    )
                    for x in checks_tables
                ],
                vertical=True,
                id=f"id-cardgroup",
            ),
            make_plot_div(active_tab),
        ]
    )
    return mystuff


TAB_LAYOUT_DICT = {"james": make_tab("james")}


@app.callback(
    Output("tab-content", "children"),
    [Input("tabs", "active_tab"), Input("store", "data")],
)
def render_tab_content(active_tab, data):
    """
    This callback takes the 'active_tab' property as input, as well as the
    stored graphs, and renders the tab content depending on what the value of
    'active_tab' is.
    """
    if active_tab and data is not None:
        if active_tab == "scatter":
            return dcc.Graph(figure=data["scatter"])
        elif active_tab == "histogram":
            return dbc.Row(
                [
                    dbc.Col(dcc.Graph(figure=data["hist_1"]), width=6),
                    dbc.Col(dcc.Graph(figure=data["hist_2"]), width=6),
                ]
            )
        elif active_tab == "james":
            logger.info("returning div with store")
            return TAB_LAYOUT_DICT[active_tab]

    return "No tab selected"


@app.callback(Output("store", "data"), [Input("button", "n_clicks")])
def generate_graphs(n):
    """
    This callback generates three simple graphs from random data.
    """
    if not n:
        # generate empty graphs when app loads
        return {k: go.Figure(data=[]) for k in ["scatter", "hist_1", "hist_2"]}

    # simulate expensive graph generation process
    time.sleep(2)

    # generate 100 multivariate normal samples
    data = np.random.multivariate_normal([0, 0], [[1, 0.5], [0.5, 1]], 100)

    scatter = go.Figure(data=[go.Scatter(x=data[:, 0], y=data[:, 1], mode="markers")])
    hist_1 = go.Figure(data=[go.Histogram(x=data[:, 0])])
    hist_2 = go.Figure(data=[go.Histogram(x=data[:, 1])])

    # save figures in a dictionary for sending to the dcc.Store
    return {"scatter": scatter, "hist_1": hist_1, "hist_2": hist_2}


if __name__ == "__main__":
    app.run_server(debug=True)
